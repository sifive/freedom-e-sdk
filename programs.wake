package freedom_e_sdk

from wake import _

export tuple FreedomESDKProgram =
  export Name: String
  export Kind: String
  export Sources: List Path
  export ForFPGA: Boolean

export def getFreedomESDKProgramSourceDir program =
  def name = program.getFreedomESDKProgramName
  def kind = program.getFreedomESDKProgramKind
  "{kind}-{name}"

export def makeFreedomESDKProgram name kind =
  def program = FreedomESDKProgram name kind Nil False
  def sourceDir = program.getFreedomESDKProgramSourceDir
  def programSources = sources sourceDir `.*`
  program
  | setFreedomESDKProgramSources programSources

export def makeFreedomESDKFPGAProgram name kind =
  makeFreedomESDKProgram name kind
  | setFreedomESDKProgramForFPGA True

# Get the list of Freedom E SDK examples which are compatible with a given target
export def allFreedomESDKExamples sdkTarget =
  def programList =
    makeFreedomESDKProgram "hello" "example",
    makeFreedomESDKProgram "atomics" "example",
    makeFreedomESDKProgram "cflush" "example",
    makeFreedomESDKProgram "csr-access" "example",
    makeFreedomESDKProgram "empty" "example",
    makeFreedomESDKProgram "buserror" "example",
    makeFreedomESDKProgram "freertos-blinky" "example",
    makeFreedomESDKProgram "freertos-minimal" "example",
    makeFreedomESDKProgram "hca-metal" "example",
    makeFreedomESDKProgram "hpm" "example",
    makeFreedomESDKProgram "i2c" "example",
    makeFreedomESDKProgram "itim" "example",
    makeFreedomESDKProgram "l2pf" "example",
    makeFreedomESDKProgram "l2pm" "example",
    makeFreedomESDKProgram "lim" "example",
    makeFreedomESDKProgram "pmp" "example",
    makeFreedomESDKProgram "rtc" "example",
    makeFreedomESDKProgram "spi" "example",
    makeFreedomESDKProgram "user-mode" "example",
    makeFreedomESDKProgram "user-syscall" "example",
    makeFreedomESDKProgram "watchdog" "example",
    makeFreedomESDKProgram "hello" "example",
    makeFreedomESDKProgram "minimal-boot" "example",
    makeFreedomESDKProgram "multicore-hello" "example",
    makeFreedomESDKProgram "return-pass" "example",
    makeFreedomESDKProgram "software-interrupt" "example",
    makeFreedomESDKProgram "timer-interrupt" "example",
    Nil
  filterFreedomESDKPrograms sdkTarget programList

export def allFreedomESDKFPGAExamples sdkTarget =
  def programList =
    makeFreedomESDKFPGAProgram "clic-hardware-vector-interrupts" "example",
    makeFreedomESDKFPGAProgram "clic-nested-interrupts" "example",
    makeFreedomESDKFPGAProgram "clic-nonvector-interrupts" "example",
    makeFreedomESDKFPGAProgram "clic-selective-vector-interrupts" "example",
    makeFreedomESDKFPGAProgram "local-interrupt" "example",
    makeFreedomESDKFPGAProgram "local-vector-interrupts" "example",
    makeFreedomESDKFPGAProgram "plic-interrupts" "example",
    makeFreedomESDKFPGAProgram "sifive-welcome" "example",
    makeFreedomESDKFPGAProgram "pwm" "example",
    Nil
  filterFreedomESDKPrograms sdkTarget programList

# Get the list of Freedom E SDK benchmarks which are compatible with a given target
export def allFreedomESDKBenchmarks sdkTarget =
  def programList =
    makeFreedomESDKProgram "coremark" "benchmark",
    makeFreedomESDKProgram "dhrystone" "benchmark",
    makeFreedomESDKProgram "mem-latency" "benchmark",
    Nil
  filterFreedomESDKPrograms sdkTarget programList

# Get all Freedom E SDK examples and benchmarks which are compatible with a given target
export def allFreedomESDKPrograms sdkTarget =
  allFreedomESDKExamples sdkTarget
  ++ allFreedomESDKFPGAExamples sdkTarget
  ++ allFreedomESDKBenchmarks sdkTarget

def filterFreedomESDKPrograms sdkTarget programs =
  def targetHasBusError = targetHasCompatible sdkTarget "sifive,buserror0"
  def targetHasClic = targetHasCompatible sdkTarget "sifive,clic0"
  def targetHasSPI = targetHasCompatible sdkTarget "sifive,spi0"
  def targetHasPWM = targetHasCompatible sdkTarget "sifive,pwm0"
  def targetHasAON = targetHasCompatible sdkTarget "sifive,aon0"
  def targetIs2Series = targetHasCompatible sdkTarget "sifive,caboose0"

  def coreDTSContents =
    def coreDTS =
      sdkTarget.getFreedomESDKTargetInstalledFiles
      | filter (\p (! matches `.*core\.dts` p.getPathName))
      | head
    match coreDTS
      Some f = read f
      None = Fail "No core.dts in FreedomESDKTarget".makeError
  def targetHasPMP =
    match coreDTSContents
      # When PMP isn't supported, the riscv,pmpregions property is missing entirely.
      # If at some point in the future it is present but set to 0 to indicate missing
      # PMP functionality, this test will need to be updated.
      Pass c = matches `.*riscv,pmpregions.*` c
      Fail _ = False

  def targetHasAtomics =
    match coreDTSContents
      Pass c = matches `riscv,isa = "rv32.*a.*"` c
      Fail _ = False

  programs
  | filter (\p (! matches `.*atomics.*` p.getFreedomESDKProgramName) || (! targetIs2Series))
  | filter (\p (! matches `.*atomics.*` p.getFreedomESDKProgramName) || targetHasAtomics)
  | filter (\p (! matches `.*buserror.*` p.getFreedomESDKProgramName) || targetHasBusError)
  | filter (\p (! matches `.*clic.*` p.getFreedomESDKProgramName) || targetHasClic)
  | filter (\p (! matches `.*multicore-hello.*` p.getFreedomESDKProgramName) || (! targetIs2Series))
  | filter (\p (! matches `.*multicore-hello.*` p.getFreedomESDKProgramName) || targetHasAtomics)
  | filter (\p (! matches `.*spi.*` p.getFreedomESDKProgramName) || targetHasSPI)
  | filter (\p (! matches `.*pmp.*` p.getFreedomESDKProgramName) || targetHasPMP)
  | filter (\p (! matches `.*pwm.*` p.getFreedomESDKProgramName) || targetHasPWM)
  | filter (\p (! matches `.*rtc.*` p.getFreedomESDKProgramName) || targetHasAON)
  | filter (\p (! matches `.*user.*` p.getFreedomESDKProgramName) || (! targetIs2Series))
  | filter (\p (! matches `.*user.*` p.getFreedomESDKProgramName) || targetHasPMP)
  | filter (\p (! matches `.*(watchdog|wdog).*` p.getFreedomESDKProgramName) || targetHasAON)
  | filter (\p (! freedomESDKProgramOverflowsMemory sdkTarget p))
  | filter (\p (! freedomESDKProgramCannotLinkUnderCodeModel sdkTarget p))

def targetHasCompatible sdkTarget compatible =
  def sdk = sdkTarget.getFreedomESDKTargetSDK
  def buildEnv = sdk.getFreedomESDKBuildEnv
  def venv = sdk.getFreedomESDKVenv
  def detectCompatible = "{here}/scripts/detect_compatible.py"

  def targetBSPDir = "{sdk.getFreedomESDKDir}/bsp/{sdkTarget.getFreedomESDKTargetName}"

  def inputs =
    source detectCompatible,
    sdkTarget.getFreedomESDKTargetInstalledFiles
    ++ venv.getFreedomESDKVirtualenvInstalledFiles

  def cmdline =
    def venvPath = freedomESDKVenvDir buildEnv
    "bash", "-c", "%
      . $(pwd)/%{venvPath}/bin/activate
      touch %{targetBSPDir}/compatcheck
      %{detectCompatible} \
        --dts %{targetBSPDir}/design.dts \
        --compatible %{compatible}
      %", Nil

  def jobStatus =
    makePlan cmdline inputs
    | setPlanResources defaultFreedomESDKResources
    | setPlanLocalOnly True
    | runJob
    | getJobStatus

  match jobStatus
    Exited code = code == 0
    _ = False
